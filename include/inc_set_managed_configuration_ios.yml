---
#
# file: inc_set_managed_configuration_ios.yml
#
# Returns
# =======
# is_config_compliant: bool
#
- name: Initialize Data
  set_fact:
    # Switch running configuration backup file. if empty the devic's running config wil be used
    src_config_filename: ""

    # Generated configuration file to replace running config on switch
    managed_config_dest: "{{ config_dir }}/{{ inventory_hostname }}_managed_configuration.{{ ansible_network_os }}"

    # Generated configuration file to replace running config on switch
    unmanaged_config_dest: "{{ host_tmpdir }}/{{ inventory_hostname }}_0001_unmanaged_configuration.{{ ansible_network_os }}"

    # Regex to remove managed configuration sections from current switch configuration
    delete_section_regex:
      - ^Building\s+configuration.*$$
      - ^Current\s+configuration.*$$
      - ^Load\s+for\s+five\s+secs.*$$
      - ^Time\s+source\s+is\s+NTP.*$$
      - ^vlan\s+\d*$$
      - ^ip access-list\s+standard\s+emergency-access$$
      - ^banner\s+.*\^C$$
      - ^end$$
      # - ^interface\s+Vlan\d*$$
      # - ^spanning-tree\s+.*$$
      # - ^snmp-server\s+.*$$
      # - ^radius-server\s+.*$$
      # - ^radius\s+server\s+.*$$
      # - ^clock\s+.*$$
      # - ^crypto\s+.*$$

    # Regex to remove messages from config compare result
    delete_section_diff_result:
    - ^Load\s+for\s+five\s+secs.*$$
    - ^Time\s+source\s+is\s+NTP.*$$

#######################################################################
# Initialize environment
#######################################################################

- debug:
    msg: "vars_dir: {{ vars_dir }}/{{ switch_location_group }}"
  delegate_to: localhost
  tags: [print_action]


- name: "Read all configuration definitions"
  include_vars:
    dir: "{{ vars_dir }}/{{ switch_location_group }}"
  check_mode: false
  delegate_to: localhost

- name: Ensure directories exists
  include_tasks: "{{ include_dir }}/inc_validate_directories.yml"
  check_mode: false
  delegate_to: localhost

- name: Read the switch's serial numbers for banner motd
  ios_facts:
  register: facts
  check_mode: no

- name: Read configuration from switch
  block:
    - napalm_get_facts:
        provider: "{{ provider_napalm }}"
        timeout: 120
        filter:
          - "config"
    - set_fact:
        src_config: "{{ napalm_config.running }}"
  when:
    - src_config_filename == ""

- name: Check that archive is enabled (required for napalm_install_config)
  ios_command:
    commands:
      - "show archive"
  register: show_archive_result
  changed_when: false
  check_mode: false
- assert:
    msg:
    that:
      - show_archive_result.stdout[0].find("not enabled") == -1

- name: Lookup configuration from file is src_config_filename is scecified
  set_fact:
    src_config: "{{ lookup('file', src_config_filename) }}"
  delegate_to: localhost
  when:
    - src_config_filename != ""

- set_fact:
    textfsm_show_run_interfaces_part: "{{ src_config | parse_cli_textfsm(textfsm_template_dir ~ '/cisco_ios_show_run_interface_part.template') }}"
    managed_client_ports_dest: "{{ host_tmpdir }}/{{ inventory_hostname }}_managed_client_ports.yml"
  delegate_to: localhost

- name: "Generate managed client port list as 'managed_client_ports:'"
  include_tasks: "{{ include_dir }}/inc_template.yml"
  vars:
    template_name: "gen_managed_client_interface_list.j2"
    template_dest: "{{ managed_client_ports_dest }}"
  delegate_to: localhost

- name: Import generated list
  include_vars: "{{ managed_client_ports_dest }}"
  delegate_to: localhost


#######################################################################
# Handle unmanaged banner ('^C' conversion to \x03)
#######################################################################

- name: Extract all IOS-Banners and replace "^C" with chr(0x03)
  block:
    - set_fact:
        banner_motd: "{{ src_config | ios_config_section_extract(regex, false, '', fname) }}"
      vars:
        regex: ^banner\s+motd\s+\^C$$
        fname: "{{ host_tmpdir }}/{{ inventory_hostname }}_9000_banner_motd.{{ ansible_network_os }}"
      when:
        - inventory_hostname in ["ATBRACSC001", "ATKPACSC001"]
    - set_fact:
        banner_motd: "{{ src_config | ios_config_section_extract(regex, false, '', fname) }}"
      vars:
        regex: ^banner\s+motd\s+\^C$$
        fname: ''  # do not save managed configuration
      when:
        - inventory_hostname != "ATBRACSC001"
        - inventory_hostname != "ATKPACSC001"
    - set_fact:
        banner_login: "{{ src_config | ios_config_section_extract(regex, false, '', fname) }}"
      vars:
        regex: ^banner\s+login\s+\^C$$
        fname: "{{ host_tmpdir }}/{{ inventory_hostname }}_9001_banner_login.{{ ansible_network_os }}"
    - set_fact:
        banner_exec: "{{ src_config | ios_config_section_extract(regex, false, '', fname) }}"
      vars:
        regex: ^banner\s+exec\s+\^C$$
        fname: "{{ host_tmpdir }}/{{ inventory_hostname }}_9002_banner_exec.{{ ansible_network_os }}"
    - set_fact:
        banner_incoming: "{{ src_config | ios_config_section_extract(regex, false, '', fname) }}"
      vars:
        regex: ^banner\s+incoming\s+\^C$$
        fname: "{{ host_tmpdir }}/{{ inventory_hostname }}_9003_banner_incoming.{{ ansible_network_os }}"
    - set_fact:
        banner_slip_ppp: "{{ src_config | ios_config_section_extract(regex, false, '', fname) }}"
      vars:
        regex: ^banner\s+slip-ppp\s+\^C$$
        fname: "{{ host_tmpdir }}/{{ inventory_hostname }}_9003_banner_slip-ppp.{{ ansible_network_os }}"
  delegate_to: localhost

# - name: Display BANNER MOTD
#   debug:
#     msg: "===== BANNER MOTD =====\n{{ banner_motd | to_nice_yaml }}"
#   delegate_to: localhost
#   tags: [print_action]

#######################################################################
# Remove managed configuration sections from file
#######################################################################

- name: Remove all blocks or commands defined in delete_section_regex
  # The included task will re-read the var src_config from generated configuration
  set_fact:
    src_config: "{{ src_config | ios_config_section_remove(delete_section_regex) }}"

# - name: Display After regex
#   debug:
#     msg: "===== After regex =====\n{{ src_config | to_nice_yaml }}"
#   delegate_to: localhost
#   tags: [print_action]

- name: Remove all managed Client Ports
  set_fact:
    src_config: "{{ src_config | ios_config_section_remove(managed_client_ports, false, 'interface\\s+', unmanaged_config_dest) }}"

# - name: Display after Client Ports
#   debug:
#     msg: "===== Client Ports =====\n{{ src_config | to_nice_yaml }}\n--------- managed_client_ports ------------\n{{ managed_client_ports | to_nice_yaml }}"
#   delegate_to: localhost
#   tags: [print_action]

#######################################################################
# Save content of src_config as string
#######################################################################

- name: Save unmanaged configuration
  copy:
    content: "{{ src_config | join('\n') }}"
    dest: "{{ unmanaged_config_dest }}"
  delegate_to: localhost

#######################################################################
# Generate managed configuration parts from datamodel
#######################################################################

- name: Generate VLAN Device-VLAN configuration
  include_tasks: "{{ include_dir }}/inc_template.yml"
  vars:
    dest_filename_part: "0010_vlan_configuration"
    template_dest: "{{ host_tmpdir }}/{{ inventory_hostname }}_{{dest_filename_part}}.{{ ansible_network_os }}"
    template_name: "config_vlans.j2"
  delegate_to: localhost

- name: Generate Client Ports Configuration
  include_tasks: "{{ include_dir }}/inc_template.yml"
  vars:
    dest_filename_part: "0800_client_ports_configuration"
    template_dest: "{{ host_tmpdir }}/{{ inventory_hostname }}_{{dest_filename_part}}.{{ ansible_network_os }}"
    template_name: "config_client_interfaces.j2"
  delegate_to: localhost

- name: Generate Emergency Access List
  include_tasks: "{{ include_dir }}/inc_template.yml"
  vars:
    dest_filename_part: "0100_acl_emergency_access_configuration"
    template_dest: "{{ host_tmpdir }}/{{ inventory_hostname }}_{{dest_filename_part}}.{{ ansible_network_os }}"
    template_name: "config_acl_emergency_access.j2"
  delegate_to: localhost

- name: Generate banner motd
  include_tasks: "{{ include_dir }}/inc_template.yml"
  vars:
    display_core: "{{ '( --- CORE-SWITCH --- )' if is_default_gateway is defined and is_default_gateway == true else '' }}"
    dest_filename_part: "9010_banner_client_ports_configuration"
    template_dest: "{{ host_tmpdir }}/{{ inventory_hostname }}_{{dest_filename_part}}.{{ ansible_network_os }}"
    template_name: "config_ios_banner_motd.j2"
  when:
    - inventory_hostname != "ATBRACSC001"
    - inventory_hostname != "ATKPACSC001"
  delegate_to: localhost


- name: Write end marker
  copy:
    content: "end"
    dest: "{{ host_tmpdir }}/{{ inventory_hostname }}_9999_end.{{ ansible_network_os }}"
  delegate_to: localhost


#######################################################################
# Assemble all files and output desired running configuration
#######################################################################

- name: Assemble configuration
  assemble:
    src: "{{ host_tmpdir }}"
    dest: "{{ managed_config_dest }}"
    regexp: "^.*\\.{{ ansible_network_os }}$$"
  delegate_to: localhost


#######################################################################
# Write new configuration to device (do_commit is defined) else
# show diff between running and desired cs_configuration
#######################################################################

- name: Set Configuration - Check-Mode if do_commit is not defined
  napalm_install_config:
    config_file: "{{ managed_config_dest }}"
    commit_changes: "{{ do_commit is defined and is_report_active is not defined }}"
    replace_config: true
    get_diffs: true
    diff_file: "{{ managed_config_dest }}.diff"
    provider: "{{ provider_napalm }}"
    timeout: 120
  register: result
  tags: [print_action]

- name: Set Modified Flag
  set_fact:
    is_config_compliant: "{{ (result is defined and result.msg | ios_config_section_remove(delete_section_diff_result) == []) | lower }}"
  delegate_to: localhost
